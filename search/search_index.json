{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#easily-create-audio-for-passive-input","title":"Easily create audio for passive input","text":"<p>Condense anime audio into just the dialogue. Optionally include the OP and ED. No need to find or sync any subtitles.</p> <p></p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Generates condensed audio from video files without subtitle files</li> <li>Optionally include the OP and ED in the final condensed file</li> <li>Input a single video or a folder of videos</li> <li>Uses ML model based on the YOHO paper with a convnext backbone</li> </ul>"},{"location":"#planned-updates","title":"Planned Updates","text":"<ul> <li>Automatic Model Updates on Startup</li> <li>Remove Fastai requirement for running the model</li> <li>Options to change some of the model output filtering and smoothing such as the threshold and padding values</li> </ul>"},{"location":"#caveats","title":"Caveats","text":"<ul> <li>The quality of the output can vary depending on the content. I will be adding options in the future for more aggressive or less aggresive filtering. However, the quality of the model should improve over time as I expand and modify the dataset. </li> </ul>"},{"location":"#alternatives-other-tools","title":"Alternatives + Other Tools","text":"Condensing <p>1.     subs2cia - Condenses audio using subtitle files. I was using this before developing Koemoe.</p> Subtitle Retiming <p>1.     auto-sub-retimer     For retiming subtitles to videos. Very useful for syncing JP subs to JP content. The only cavaet is if the subtitles are image based, this will not work. There are some workarounds for this.</p>"},{"location":"guides/","title":"Guides","text":"<p>Required Tools ffmpeg and SubtitleEdit</p>"},{"location":"guides/#extracting-image-based-subtitles-and-converting-them","title":"Extracting Image-based subtitles and converting them","text":"<p>This is useful for when you have a video file with embedded subtitles but they are bitmap based so you cannot use them with tools like auto-sub-retimer or subs2cia</p>"},{"location":"guides/#1-extracting","title":"1. Extracting","text":"<p>Extract the image-based subtitles from the video file into a new file called <code>subtitles.sup</code> <pre><code>ffmpeg -i '.\\video.mkv' -map 0:s:1 -c copy 'subtitles.sup'\n</code></pre></p> <p>You may need to choose a different subtitle index</p> <ul> <li>Here we take an input file, marked by -i .\\video.mkv</li> <li>We copy the second subtitle stream (-map 0:s:1) to a new file subtitles.sup</li> </ul>"},{"location":"guides/#2-ocr","title":"2. OCR","text":"<p>Open up <code>subtitles.sup</code> in SubtitleEdit. </p> <p></p> <p>It should look like this</p> <p>Click <code>Start OCR</code> and fix anything it is unsure of. You can also lower the max error rate to make sure you get good subtitles at the end. </p> <p>Hit <code>OK</code> when it completes. Then click <code>File -&gt; Save</code> to save it</p> <p></p>"},{"location":"guides/#3-optional-remux-new-subtitles-back-into-the-video","title":"3. <code>Optional</code> Remux new subtitles back into the video","text":"<p>This command takes the original file, copies all the original audio, video and subtitle streams, and adds the additional subtitle file you just created into a new file called <code>video_with_subs.mkv</code> <pre><code>ffmpeg -i '.\\video.mkv' -f srt -i '.\\subtitles.srt' -map 0 -c:v copy -c:a copy -c:s srt 'video_with_subs.mkv'\n</code></pre></p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#1-prerequisites","title":"1. Prerequisites","text":"<p>Clone the git repository to a local folder <pre><code>git clone 'https://github.com/mcgrizzz/Koe.moe'\ncd './Koemoe'\n</code></pre></p> <p>Goto the releases page and download the latest model. Place it into <code>/koemoe/model</code> folder that should be empty.</p> <p>koemoe/</p> <pre><code>\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 [model].pt\n\u251c\u2500\u2500 condense.py\n\u251c\u2500\u2500 ...\n\u2514\u2500\u2500 utils.py\n</code></pre> <p>Download ffmpeg and install it</p>"},{"location":"installation/#2-continue-with-conda-or-pip","title":"2. Continue with Conda or Pip","text":"CondaPip <p>Download and install miniconda</p> <p>In the main directory of <code>Koemoe</code> run the following commands</p> CUDACPU <pre><code>conda env create -f 'environment_cuda.yml'\nconda activate 'koemoe'\n</code></pre> <pre><code>conda env create -f 'environment_cpu.yml'\nconda activate 'koemoe'\n</code></pre> <p>Download and Install python 3.8+ In the main directory of <code>Koemoe</code> run the following commands</p> CUDACPU <pre><code>pip install -r 'requirements_cuda.txt'\n</code></pre> <pre><code>pip install -r 'requirements_cpu.txt'\n</code></pre> <p>Finally run one more command    <pre><code>pip install -r 'requirements_common.txt'\n</code></pre></p>"},{"location":"installation/#faq","title":"FAQ","text":"Which do I install: CUDA or CPU? <pre><code>graph LR\nA(Do you have an Nvidia GPU?)-- YES --&gt;B(CUDA);\nA-- NO --&gt;C(CPU);</code></pre> Why use Conda? <p>Conda will create a self-contained environment for all of project requirements that is separate from the rest of your system. For example you can have python 3.8 installed on your system but in the conda environment it can be any other version. The downside to this approach is you must be in the conda environment (<code>conda activate koemoe</code>) in order to run the program</p>"},{"location":"usage/","title":"Usage","text":"<p>If you're using conda, switch to the koemoe conda environment <pre><code>conda activate 'koemoe'\n</code></pre></p>"},{"location":"usage/#quick-start-and-examples","title":"Quick Start and Examples","text":""},{"location":"usage/#single-file","title":"Single File","text":"<p>Condense a single file, <code>Anime_S01E01.mkv</code> <pre><code>python './condense.py' 'X:/anime/Anime_S01E01.mkv'\n</code></pre></p>"},{"location":"usage/#folder","title":"Folder","text":"<p>Condense a every video file in a folder, <code>X:/anime/</code></p> <pre><code>python './condense.py' 'X:/anime/'\n</code></pre> <p>Note</p> <p>The rest of the examples are run for a folder, but work the same on single files</p>"},{"location":"usage/#include-op-and-ed","title":"Include OP and ED","text":"<p><code>-io</code> <code>--include-op</code> <code>-ie</code> <code>--include-ed</code></p> <pre><code>#Include the opening\npython './condense.py' -io 'X:/anime/'\n\n#Include the ending\npython './condense.py' -ie 'X:/anime/'\n\n# Include both\npython './condense.py' -io -ie 'X:/anime/'\n</code></pre>"},{"location":"usage/#change-the-output-directory","title":"Change the output directory","text":"<p><code>-o</code> <code>--output-dir</code></p> <pre><code>python './condense.py' -o 'X:/condensed_anime/' 'X:/anime/'\npython './condense.py' --output-dir 'X:/condensed_anime/' 'X:/anime/'\n</code></pre>"},{"location":"usage/#change-the-output-name-or-format","title":"Change the output name or format","text":"<p><code>-f</code> <code>--output-format</code></p> <pre><code>python './condense.py' -f \"$name$_condensed.wav\" 'X:/anime/'\npython './condense.py' --output-format \"$name$_condensed.wav\" 'X:/anime/'\n</code></pre>"}]}